library(rpart)
library(rpart.plot)
library(caTools)
library(pROC)
install.packages(c("caTools", "pROC", "rpart.plot"))
library(rpart)
library(rpart.plot)
library(caTools)
library(pROC)
rm(list=ls()) # clear environment
data <- read.csv("HR.csv")
str(data)
View(data)
summary(data)
# left is our target variable
data$left = as.factor(data$left)
str(data)
data$Work_accident = as.factor(data$Work_accident)
###STEP 2 - SPLIT DATA INTO TRAIN AND TEST
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
#DTModel <- rpart(left ~.,method = "class", data = trainData,
#                 parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
# Running the simple model
DTModel <- rpart(left ~.,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 2, fallen.leaves = F, cex = 0.8) #extra
###STEP 2 - SPLIT data into TRAIN and TEST - Stratified Sampling
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
#DTModel <- rpart(left ~.,method = "class", data = trainData,
#                 parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
# Running the simple model
DTModel <- rpart(left ~.,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 2, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
###STEP 2 - SPLIT data into TRAIN and TEST - Stratified Sampling
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
#DTModel <- rpart(left ~.,method = "class", data = trainData,
#                 parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
# Running the simple model
DTModel <- rpart(left ~.,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 2, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
###STEP 2 - SPLIT data into TRAIN and TEST - Stratified Sampling
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
#DTModel <- rpart(left ~.,method = "class", data = trainData,
#                 parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
# Running the simple model
DTModel <- rpart(left ~.,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 2, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
###STEP 2 - SPLIT data into TRAIN and TEST - Stratified Sampling
set.seed(123) # sets predictable seed val for data split
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
#DTModel <- rpart(left ~.,method = "class", data = trainData,
#                 parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
# Running the simple model
DTModel <- rpart(left ~.,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 2, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
View(DTModel)
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
DTModel <- rpart(left ~ salary+satisfaction_level,method = "class", data = trainData, parms = list (split="information gain"))
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.8) #extra describes what leaces will have
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.6) #extra describes what data leaves will display
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.7) #extra describes what data leaves will display
DTModel <- rpart(left ~.,method = "class", data = trainData,
parms = list (split="information gain"), control = rpart.control(minsplit = 100, maxdepth = 4))
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.7) #extra describes what data leaves will display
predTest <- predict(DTModel, testData, type = "class")
probTest <- predict(DTModel, testData, type = "prob")
###STEP 4 - USE THE MODEL TO MAKE PREDICTIONS OF TEST DATA
predTest <- predict(DTModel, testData, type = "class")
###STEP 4 - USE THE MODEL TO MAKE PREDICTIONS OF TEST DATA
predTest <- predict(DTModel, testData, type = "class")
probTest <- predict(DTModel, testData, type = "prob")
View(predTest)
View(probTest)
View(predTest, "Class Predictions")
actualTest <- testData$left
actualTest[0:5]
predTest[0:5]
head(actualTest)
head(predTest)
tail(predTest)
tail(actualTest)
actualTest[0:10]
predTest[0:10]
predTest[0:10,1]
predTest[0:10,0]
predTest[0:10,2]
predTest[0:10,0]
predTest[0:10,]
predTest[0:10]
###STEP 5 - CALCULATE THE ACCURACY
t1 <- table(predictions = predTest, actual = actualTest)
t1
str(t1)
t1
View(t1)
t1 # See the table
accuracy1 = sum(diag(t1))/sum(t1)
accuracy1
diag(t1)
# side by side comparison in test data
testData$predictions <- predTest
testData$actual <- actualTest
View(testData)
probTest$0
probTest
probTest[,'0']
# adding probabilites
testData$prob0 <- probTest[,"0"]
testData$prob1 <- probTest[,"1"]
### ROC and Area Under the Curve
ROC <- roc(actualTest, probTest[,2])
plot(ROC, col="blue")
AUC <- auc(ROC)
AUC
# Classification Tree with rpart
# packages required
# install.packages("rplot.plot")
# install.packages("pROC")
library(rpart)
library(rpart.plot)
library(caTools)
library(pROC)
###STEP 1 -LOADING DATA
rm(list=ls()) # clear environment
data <- read.csv("HR.csv")
str(data)
summary(data)
View(data)
# left is our target variable: make category
data$left = as.factor(data$left)
data$Work_accident = as.factor(data$Work_accident)
###STEP 2 - SPLIT data into TRAIN and TEST - Stratified Sampling
set.seed(123) # sets predictable seed val for data split
newDataset <- sample.split(Y=data$left, SplitRatio = 0.7)
trainData <- data[newDataset,]
testData <- data[!newDataset,]
###STEP 3 - BUILD THE MODEL - Fit a DT using Training Data
# The ~ separates [target ~ input variables]. '.' is a catch-all
# DTModel <- rpart(left ~ salary+satisfaction_level,method = "class", data = trainData, parms = list (split="information gain"))
DTModel <- rpart(left ~.,method = "class", data = trainData,
parms = list (split="information gain"),
control = rpart.control(minsplit = 100, maxdepth = 4))
rpart.plot(DTModel, type=3, extra = 101, fallen.leaves = F, cex = 0.7) #extra describes what data leaves will display
